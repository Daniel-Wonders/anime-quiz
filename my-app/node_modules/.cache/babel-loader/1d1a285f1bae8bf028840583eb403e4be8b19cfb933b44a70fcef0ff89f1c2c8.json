{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lauta\\\\Documents\\\\GitHub\\\\anime-quiz\\\\my-app\\\\src\\\\Components\\\\Question.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { decode } from 'html-entities';\nimport he from 'he';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Question(props) {\n  _s();\n  const [isAnswered, setIsAnswered] = React.useState(false);\n  const [answersArr, setAnswersArr] = React.useState([]);\n  const [randomIndex, setRandomIndex] = React.useState(Math.floor(Math.random() * 4));\n  React.useEffect(() => {\n    //setRandomIndex(Math.floor(Math.random() * 4))\n    const decodedWrongAnswers = props.wrongs.map(answer => {\n      return he.decode(answer);\n    }); //Had to decode each str\n    const decodedRightAnswer = he.decode(props.right);\n\n    //const rightAnswer = typeof decodedRightAnswer === 'string' ? decodedRightAnswer : console.log(\"soy el erroneao\");\n\n    // Create a new array by concatenating the decoded right answer into wrong answers\n    const answers = [...decodedWrongAnswers];\n    answers.splice(randomIndex, 0, decodedRightAnswer);\n    setAnswersArr(answers);\n  }, []);\n  function handleRightAnswer() {\n    setIsAnswered(true);\n    props.incrementCounter();\n    props.incrementTotalCounter();\n  }\n  function handleWrongAnswer() {\n    setIsAnswered(true);\n    props.incrementTotalCounter();\n  }\n  const buttons = answersArr.map((answer, index) => {\n    const isRight = index === randomIndex;\n    let btnClass = \"\";\n    if (isAnswered && isRight) {\n      btnClass = \"rightBtn\";\n    }\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\" + \" \" + btnClass,\n      onClick: isRight ? handleRightAnswer : handleWrongAnswer,\n      disabled: isAnswered,\n      children: answer\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"Question\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: he.decode(props.ask)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"buttons\",\n      children: buttons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_s(Question, \"617soe6Fv6NG5fYYAdsnTCAn/8g=\");\n_c = Question;\nexport default Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["React","decode","he","jsxDEV","_jsxDEV","Question","props","_s","isAnswered","setIsAnswered","useState","answersArr","setAnswersArr","randomIndex","setRandomIndex","Math","floor","random","useEffect","decodedWrongAnswers","wrongs","map","answer","decodedRightAnswer","right","answers","splice","handleRightAnswer","incrementCounter","incrementTotalCounter","handleWrongAnswer","buttons","index","isRight","btnClass","className","onClick","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","id","ask","_c","$RefreshReg$"],"sources":["C:/Users/lauta/Documents/GitHub/anime-quiz/my-app/src/Components/Question.js"],"sourcesContent":["import React from 'react';\r\nimport { decode } from 'html-entities';\r\nimport he from 'he';\r\n\r\nfunction Question(props) {\r\n    const [isAnswered, setIsAnswered] = React.useState(false);\r\n    const [answersArr, setAnswersArr] = React.useState([]);\r\n    const [randomIndex,setRandomIndex] = React.useState(Math.floor(Math.random() * 4))\r\n\r\n    React.useEffect(() => {\r\n        //setRandomIndex(Math.floor(Math.random() * 4))\r\n        const decodedWrongAnswers=props.wrongs.map((answer)=>{return (he.decode(answer))})//Had to decode each str\r\n        const decodedRightAnswer = he.decode(props.right);\r\n\r\n        //const rightAnswer = typeof decodedRightAnswer === 'string' ? decodedRightAnswer : console.log(\"soy el erroneao\");\r\n\r\n        // Create a new array by concatenating the decoded right answer into wrong answers\r\n        const answers = [...decodedWrongAnswers];\r\n        answers.splice(randomIndex, 0, decodedRightAnswer);\r\n\r\n\r\n        setAnswersArr(answers);\r\n    }, []); \r\n\r\n    function handleRightAnswer() {\r\n        setIsAnswered(true);\r\n        props.incrementCounter();\r\n        props.incrementTotalCounter()\r\n        \r\n    }\r\n\r\n    function handleWrongAnswer() {\r\n        setIsAnswered(true);\r\n        props.incrementTotalCounter()\r\n\r\n    }\r\n\r\n    const buttons = answersArr.map((answer, index) => {\r\n        const isRight = index === randomIndex;\r\n\r\n        let btnClass = \"\";\r\n        if (isAnswered && isRight) {\r\n            btnClass = \"rightBtn\";\r\n        }\r\n\r\n        return (\r\n            <button\r\n                className={\"btn\" + \" \" + btnClass}\r\n                key={index}\r\n                onClick={isRight ? handleRightAnswer : handleWrongAnswer}\r\n                disabled={isAnswered}\r\n            >\r\n                {answer}\r\n            </button>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div id=\"Question\">\r\n            <p>{he.decode(props.ask)}</p>\r\n\r\n            <div id=\"buttons\">{buttons}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Question;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}