{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lauta\\\\Documents\\\\GitHub\\\\anime-quiz\\\\my-app\\\\src\\\\Components\\\\Trivia.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Trivia(props) {\n  _s();\n  const [questions, setQuestions] = React.useState([]);\n  const [fetchError, setFetchError] = React.useState(null);\n  React.useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const response = await fetch(\"https://opentdb.com/api.php?amount=5&category=31&type=multiple\");\n        if (!response.ok) {\n          props.crashed();\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setQuestions(data.results || []);\n      } catch (error) {\n        props.crashed();\n        setFetchError(error.message);\n      }\n    };\n    fetchQuestions();\n  }, []);\n  let counterColor = props.counter === 0 ? \"redCounter\" : \"greenCounter\";\n  counterColor = props.counter === 5 ? \"goldenCounter\" : counterColor;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"Trivia\",\n    className: props.dimmed ? \"dimmed\" : \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"correctCounter\",\n      children: [\"YOU'VE ANSWERED CORRECTLY \\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n        id: counterColor,\n        children: props.counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), \"/5 QUESTIONS\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), fetchError ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"Error fetching data: \", fetchError]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this) : questions.length > 0 ? questions.map((question, index) => /*#__PURE__*/_jsxDEV(Question, {\n      ask: question.question,\n      right: question.correct_answer,\n      wrongs: question.incorrect_answers,\n      incrementCounter: props.incrementCounter,\n      incrementTotalCounter: props.incrementTotalCounter\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }, this)) : /*#__PURE__*/_jsxDEV(\"img\", {\n      src: process.env.PUBLIC_URL + `/loading.svg`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_s(Trivia, \"ttL74cfHGdQ+Ef1uPZ2jbbpCMxo=\");\n_c = Trivia;\nvar _c;\n$RefreshReg$(_c, \"Trivia\");","map":{"version":3,"names":["React","Question","jsxDEV","_jsxDEV","Trivia","props","_s","questions","setQuestions","useState","fetchError","setFetchError","useEffect","fetchQuestions","response","fetch","ok","crashed","Error","data","json","results","error","message","counterColor","counter","id","className","dimmed","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","question","index","ask","right","correct_answer","wrongs","incorrect_answers","incrementCounter","incrementTotalCounter","src","process","env","PUBLIC_URL","_c","$RefreshReg$"],"sources":["C:/Users/lauta/Documents/GitHub/anime-quiz/my-app/src/Components/Trivia.js"],"sourcesContent":["import React from \"react\";\r\nimport Question from \"./Question\";\r\n\r\nexport default function Trivia(props){\r\n    const [questions, setQuestions] = React.useState([]);\r\n    const [fetchError, setFetchError] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        const fetchQuestions = async () => {\r\n            try {\r\n                const response = await fetch(\"https://opentdb.com/api.php?amount=5&category=31&type=multiple\");\r\n                if (!response.ok) {\r\n                    props.crashed()\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const data = await response.json();\r\n                setQuestions(data.results || []);\r\n            } catch (error) {\r\n                props.crashed()\r\n                setFetchError(error.message);\r\n            }\r\n        };\r\n    \r\n        fetchQuestions();\r\n    }, []);\r\n    \r\n\r\n    let counterColor=props.counter===0?\"redCounter\":\"greenCounter\"\r\n    counterColor= props.counter===5 ? \"goldenCounter\":counterColor\r\n  \r\n\r\n    return (\r\n        <div id=\"Trivia\" className={props.dimmed?\"dimmed\":\"\"}>\r\n            <p id=\"correctCounter\">\r\n                YOU'VE ANSWERED CORRECTLY &nbsp;\r\n                <span id={counterColor}>{props.counter}</span>\r\n                /5 QUESTIONS\r\n            </p>\r\n            {fetchError ? (\r\n                <div className=\"error\">Error fetching data: {fetchError}</div>\r\n            ) : (\r\n                questions.length > 0 ? (\r\n                    questions.map((question, index) => (\r\n                        <Question\r\n                            key={index}\r\n                            ask={question.question}\r\n                            right={question.correct_answer}\r\n                            wrongs={question.incorrect_answers}\r\n                            incrementCounter={props.incrementCounter}\r\n                            incrementTotalCounter={props.incrementTotalCounter}\r\n                        />\r\n                    ))\r\n                ) : (\r\n                    <img src={process.env.PUBLIC_URL+`/loading.svg`} />\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}